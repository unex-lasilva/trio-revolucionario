import itertools
from collections import defaultdict


def get_frequent_itemsets(transactions, min_support):
    itemset_counts = defaultdict(int)
    for transaction in transactions:
        for item in transaction:
            itemset_counts[frozenset([item])] += 1

    num_transactions = len(transactions)
    frequent_itemsets = {itemset: count / num_transactions
                         for itemset, count in itemset_counts.items()
                         if count / num_transactions >= min_support}

    k = 2
    current_frequent_itemsets = set(frequent_itemsets.keys())
    while current_frequent_itemsets:
        candidates = set(
            [i.union(j) for i in current_frequent_itemsets for j in current_frequent_itemsets
             if len(i.union(j)) == k])

        itemset_counts = defaultdict(int)
        for transaction in transactions:
            transaction_set = set(transaction)
            for candidate in candidates:
                if candidate.issubset(transaction_set):
                    itemset_counts[candidate] += 1

        current_frequent_itemsets = {itemset: count / num_transactions
                                     for itemset, count in itemset_counts.items()
                                     if count / num_transactions >= min_support}

        frequent_itemsets.update(current_frequent_itemsets)
        current_frequent_itemsets = set(current_frequent_itemsets.keys())
        k += 1

    return frequent_itemsets


def generate_association_rules(frequent_itemsets, min_confidence):
    rules = []
    for itemset in frequent_itemsets:
        if len(itemset) >= 2:
            for antecedent_size in range(1, len(itemset)):
                for antecedent in itertools.combinations(itemset, antecedent_size):
                    antecedent = frozenset(antecedent)
                    consequent = itemset - antecedent
                    if consequent:
                        support_itemset = frequent_itemsets[itemset]
                        support_antecedent = frequent_itemsets.get(antecedent, 0)
                        if support_antecedent > 0:
                            confidence = support_itemset / support_antecedent
                            if confidence >= min_confidence:
                                lift = confidence / (frequent_itemsets.get(consequent, 1e-10))
                                rules.append((antecedent, consequent, support_itemset, confidence, lift))
    return rules
