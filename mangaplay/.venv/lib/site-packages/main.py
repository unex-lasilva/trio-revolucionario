import pandas as pd
from apriori import get_frequent_itemsets, generate_association_rules

# Carregar dados
ratings = pd.read_csv('dataset.csv')
movies = pd.read_csv('movies.csv')

# Filtrar apenas notas > 3
liked = ratings[ratings['rating'] > 3]

# Criar transações (filmes gostados por usuário)
transactions = liked.groupby('user_id')['movie_id'].apply(list).tolist()

# Mapear IDs para títulos
movie_map = dict(zip(movies['movie_id'], movies['title']))

#Tiago
# Apriori
min_support = 0.2
min_confidence = 0.6
frequent_itemsets = get_frequent_itemsets(transactions, min_support)
rules = generate_association_rules(frequent_itemsets, min_confidence)


#Tiago
# Converter regras com nomes dos filmes
def movie_names(ids):
    return [movie_map.get(i, str(i)) for i in ids]


named_rules = [
    (movie_names(rule[0]), movie_names(rule[1]), rule[2], rule[3], rule[4])
    for rule in rules
]


#Tiago
# RECOMENDAÇÕES

def recommend_by_history(user_id):
    user_movies = liked[liked['user_id'] == user_id]['movie_id'].tolist()
    recommendations = set()
    for rule in rules:
        if rule[0].issubset(user_movies):
            recommendations.update(rule[1])
    return [movie_map.get(mid) for mid in recommendations if mid not in user_movies]


def recommend_by_last_movie(user_id):
    user = liked[liked['user_id'] == user_id]
    if user.empty:
        return []
    last_movie = user.sort_values('rating', ascending=False).iloc[-1]['movie_id']
    recommendations = set()
    for rule in rules:
        if rule[0] == frozenset([last_movie]):
            recommendations.update(rule[1])
    return [movie_map.get(mid) for mid in recommendations if mid != last_movie]


#Tiago
# Interface simples
def main():
    user_id = int(input("Digite o ID do usuário: "))
    print("\nBaseado no histórico de gostos:")
    recs1 = recommend_by_history(user_id)
    print(recs1 if recs1 else "Nenhuma recomendação encontrada.")

    print("\nBaseado no último filme que gostou:")
    recs2 = recommend_by_last_movie(user_id)
    print(recs2 if recs2 else "Nenhuma recomendação encontrada.")


if __name__ == '__main__':
    main()
